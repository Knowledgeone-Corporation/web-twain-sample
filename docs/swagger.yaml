openapi: 3.0.0
info:
  title: KnowledgeOne WebTwain SDK
  description: The WebTwainSDK allows for interfacing with imaging devices connected to the client machine.
  version: 2.0.0
  contact:
    name: KnowledgeOne Support  
    url: https://webtwainsdk.com/contact-us/
    email: support@knowledgeonecorp.com
paths:
  /Initialize:
    post:
      summary: Initialises the service.
      description: Starts a new session with the service. <br/> You will need to generate a unique identifer for the session, this will be used for subsequent calls. (e.g. the current time in ticks). <br/> This call will return the version of the installed service and whether the OCR option is enabled.
      parameters: 
        - $ref: '#/components/parameters/clientID'
        - $ref: '#/components/parameters/licenseFile'
      responses:
        '200':
          description: Returns a ServiceData object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceData'
                
  /InitService:
    post:
      summary: Initialises the service.
      description: Starts a new session with the service. <br/> You will need to generate a unique identifer for the session, this will be used for subsequent calls. (e.g. the current time in ticks). <br/> This call will return the a collection of imaging devices, the version of the installed service and whether the OCR option is enabled.
      deprecated: true
      parameters: 
        - $ref: '#/components/parameters/clientID'
        - $ref: '#/components/parameters/licenseFile'
      responses:
        '200':
          description: Returns a ServiceData object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceData'
                
  /ResetService:
    get:
      summary: Restart the service to reset the list of imaging devices.
      description: Restart the service to reset the list of imaging devices. <br> Returns HTTP200 OK if the service is successfully restarted.
      deprecated: true
      responses:
        '200':
          description: The service is successfully restarted.

  /ServiceAvailable:
    get:
      summary: Returns HTTP200 OK if the service is available.
      description: Returns HTTP200 OK if the service is available.
      responses:
        '200':
          description: The service is available.

  /FetchVersion:
    get:
      summary: Returns the version of the service.
      responses:
        '200':
          description: Returns a string value of the current version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchVersion'
                
  /Devices:
    get:
      summary: Returns the collection of imaging devices.
      description: Retrieves the collection containing the imaging devices available on the user's machine.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns a a collection containing the imaging devices available on the user's machine
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: "#/components/schemas/Source"
  /Device:
    get:
      summary: Return properties of the specified imaging device.
      description: Retrieves the properties of the specified imaging device. <br> Properties are Source Type, Pixel Type, Resolution Type, Duplex (Feeder), Page Size,...
      parameters:
        - $ref: '#/components/parameters/clientID'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Return properties of the specified imaging device.
          content:
            application/json:
              schema: 
                type: object
                $ref: "#/components/schemas/Source"
                
  /CheckIsFeederLoaded:
    get:
      summary: Checks if document feeder is loaded or empty for the specified imaging device.
      description: Checks if document feeder is loaded with paper or empty for the specified imaging device.
      parameters:
        - $ref: '#/components/parameters/clientID'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Return boolean result.
          content:
            application/json:
              schema: 
                type: boolean
                
  /StartScan:
    post:
      summary: Starts a session with the selected imaging device.
      description: Starts a session with the selected imaging device. <br/> The native scanning form for the selected device will be shown to the user. <br/> Once this method has been invoked you will need to poll CheckScanStatus to determine if the session has ended.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartScan"
      responses:
        '200':
          description: Returns current number of pages scanned.
          content:
            application/json:
              schema:
                type: integer
                example: 3
                description: the current number of pages scanned.
  
  /CheckScanStatus:
    get:
      summary: Checks if the current image acquisition session has completed.
      description: Poll this method once a session has been instantiated with the scanner. <br/> The 'scanRunning' property is set to false on completion. <br/> Return whether the native scanner is still running, if an error has been encountered and the total pages scanned.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns a StatusMessage object.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/StatusMessage'
                
  /AddDocument:
    post:
      summary: Add/import document to current pages.
      description: Start adding or importing document types such as PDF, PDF/A, TIFF, TIF, JPG, JPEG, PNG, BMP, and GIF, treating them as or resembling scanned documents.<br/> Once this method has been invoked you will need to poll GetAddingDocumentProgress to determine if the adding/importing has ended.
      parameters:
        - $ref: '#/components/parameters/clientID'
        - $ref: '#/components/parameters/currentPage'
        - $ref: '#/components/parameters/scanType'
        - $ref: '#/components/parameters/autoDeskew'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Adding/Importing document process is successfully started

  /GetAddingDocumentProgress:
    get:
      summary: Checks if the current adding/importing document has completed.
      description: Poll this method once start adding/importing document. <br/> The 'completed' property is set to true on completion. <br/> Return whether the adding/importing process is still running, if an error has been encountered and the total pages added/imported
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns a AddingDocumentProgress object.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/AddingDocumentProgress'
                
  /GetPageCount:
    get:
      summary: Returns the total number of pages currently acquired.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns an integer value total number of pages acquired
          content:
            application/json:
              schema: 
                type: integer
                description: a positive number
                example: 8
  
  /GetPage:
    get:
      summary: Returns the image details at a specified index.
      description: After successful image aquisition (CheckScanStatus), use this method to retrieve the page to be show the user. <br/> Returns The image is a base64 encoded string and the requested page.
      parameters:
        - $ref: '#/components/parameters/clientID'
        - in: query
          name: page
          description: the page index
          example: 3
          schema: 
            type: integer
          required: true
      responses:
        '200':
          description: Returns an ImageData object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ImageDataResponse'

  /SavePage:
    get:
      summary: Saves any modifications made to the page.
      description: Should be called if any changes have been applied to the source image (redacting|removed|rotating).
      parameters:
        - in: query
          name: data
          schema: 
            $ref: '#/components/schemas/ImageData'
          required: true
      responses:
        '200':
          description: Returns whether the save was successful or not
          content:
            application/json:
              schema: 
                type: boolean
                description: whether the save was successful
                example: true
                
  /MovePage:
    post:
      summary: Moves the page from a specified index to another index.
      parameters:
        - $ref: '#/components/parameters/clientID'
        - in: query
          name: fromPage
          description: the index of the page to be moved.
          example: 1
          schema: 
            type: integer
          required: true
        - in: query
          name: toPage
          description: the index to be placed at in the document.
          example: 5
          schema: 
            type: integer
          required: true
      responses:
        '200':
          description: Returns whether the page was moved or not
          content:
            application/json:
              schema: 
                type: boolean
                description: whether the move was successful
                example: true
                
  /DeletePage:
    post:
      summary: Deletes a page at the specified index.
      description: This operation can not be reversed.
      parameters:
        - $ref: '#/components/parameters/clientID'
        - in: query
          name: page
          description: the page index to delete
          example: 3
          schema: 
            type: integer
          required: true
      responses:
        '200':
          description: Returns whether the page was deleted or not.
          content:
            application/json:
              schema: 
                type: boolean
                description: whether the deletion was successful.
                example: true
                
  /DeleteAllPages:
    post:
      summary: Deletes all the acquired pages from the imaging device.
      description: This operation can not be reversed.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns whether the pages were deleted or not
          content:
            application/json:
              schema: 
                type: boolean
                description: whether the deletion was successful.
                example: true

  /ResizePage:
    post:
      summary: Start resizing page(s) process.
      description: Start resizing page(s) with the supplied parameters. <br/> You need to poll GetResizingProgress API to get the job status.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResizePageRequest"
      responses:
        '200':
          description: Resizing process is successfully started
          
  /GetResizingProgress:
    get:
      summary: Checks if the Resizing process has completed on the clients machine.
      description: Poll this method if the ResizePage request has been invoked. <br/>Return whether the Resizing process has completed and the current progress.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Return PageProcessingProgress object for process status
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/PageProcessingProgress'
                
  /DeskewPage:
    post:
      summary: Start de-skewing page(s) process.
      description: Start resizing page(s) with the supplied parameters. <br/> You need to poll GetResizingProgress API to get the job status.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeskewPageRequest"
      responses:
        '200':
          description: De-skewing process is successfully started
          
  /GetDeskewingProgress:
    get:
      summary: Checks if the de-skewing process has completed on the clients machine.
      description: Poll this method if the DeskewPage request has been invoked. <br/>Return whether the de-skewing process has completed and the current progress.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Return PageProcessingProgress object for process status
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/PageProcessingProgress'
                
  /RestorePage:
    post:
      summary: Restore the modified page to original state.
      description: Restore modified page with the supplied parameters. <br/> Returns the current page.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestorePage"
      responses:
        '200':
          description: Returns a ImageData object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ImageDataResponse'
            
  /RestoreAllPages:
    post:
      summary: Restore all modified pages to original state.
      description: Restore all modified pages with the supplied parameters. <br/> Returns the current page.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestorePage"
      responses:
        '200':
          description: Returns a ImageData object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ImageDataResponse'
                
  /ValidatePageSize:
    get:
      summary: Validate the page size before ORCing.
      description: Validate the page size before ORCing and return the list of warning pages.<br/> Warning limit can be set through <strong>OCRFilesizeWarningInMB</strong> setting in <strong>K1ScanService.exe.config</strong>. A value of <strong>0(zero)</strong> means no warning at all. No setting means take default of <strong>20MB</strong>
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns a PageSizeValidation object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/PageSizeValidation'
                
  /StartValidatePdfSize:
    get:
      summary: Start validate the pdf size before ORCing.
      description: Validate the pdf size before ORCing to indicate whether the pdf page is exceed the upload limit or not.<br/> Warning limit can be set through <strong>FileUploadLimitInMB</strong> setting in <strong>K1ScanService.exe.config</strong>.
      parameters:
        - $ref: '#/components/parameters/clientID'
        - $ref: '#/components/parameters/isPDFA'
      responses:
        '200':
          description: Validate pdf file size job started successfully
                
  /GetValidatePdfSizeProgress:
    get:
      summary: Get the pdf size validation progress and result.
      description: Polling to get the validation progress and get the pdf size validation result. A value of <strong>0(zero)</strong> means no warning at all. No setting means take default of <strong>100MB</strong>
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns a FileSizeValidation object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/FileSizeValidation'
                
  /AttachDocument:
    post:
      summary: Returns the file details of the generated file.
      description: Generates a file with the supplied parameters. <br/> Returns the file details, including the filename, size and type. Also returns the response from the file upload route. <br/>If the ocrType is set to a non-zero value, you will need to poll the CheckOCRStatus request.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttachDocument"
      responses:
        '200':
          description: Returns a FileData object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/FileData'
                
  /GetOcrProgress:
    get:
      summary: Checks if the OCR process has completed on the clients machine.
      description: Poll this method if the AttachDocumentRequest has been invoked with a non-zeo value for the <b>ocrType</b>. <br/>Return whether the OCR process has completed and the current progress.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns a OcrProcessingProgress object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/OcrProcessingProgress'
                
  /CancelOcrProcessing:
    get:
      summary: Cancel the OCR processing that still in progress.
      description: Enable the ability to cancel the OCR processing, especially the intensive and long running one.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns whether the process is successfully canceled or not
          content:
            application/json:
              schema: 
                type: boolean
                description: whether the cancelation was successful.
                example: true

  /GetOcrDocument:
    get:
      summary: Returns the file details of the generated file.
      description: Retrieves the generated OCR'ed document. <br /> Invoke this method when the <b>completed</b> property of the GetOcrProgress is set to true <br/> Returns the file details, including the filename, size and type. Also returns the response from the file upload route.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns a StatusMessage object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/FileData'
  
  /GetDocument:
    get:
      summary: Retrieves the created document from the scan service.
      description: Retrieves the latest created document from the scan service.
      responses:
        '200':
          description: Returns the document file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary'
                
  /GetListFormProcessingTemplates:
    get:
      summary: Returns the list of form processing templates.
      description: Retrieve the list of form processing templates.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns the list of form processing templates.
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: string
                  description: Template name.
                example: [ "MonthlyInvoice", "WeeklyInvoice" ]
                
  /GetFormProcessingTemplate:
    get:
      summary: Returns the information of selected form processing template.
      description: Retrieve the information of selected form processing template. <br> Which included the name of the template and region pages that contain multiple regions(location of a field to extract data)
      parameters:
        - $ref: '#/components/parameters/clientID'
        - $ref: '#/components/parameters/templateName'
      responses:
        '200':
          description: Returns the information of selected form processing. <br> Which included the name of the template and region pages that contain multiple regions(location of a field to extract data)
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/FormProcessingTemplateResponse'
                
  /SaveFormProcessingTemplate:
    post:
      summary: Save the designed form processing template.
      description: Save the pages of regions that contain the regions with typically name and location of fields.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveFormProcessingTemplateRequest"
      responses:
        '200':
          description: Successfully save the form processing template
          
  /DeleteFormProcessingTemplate:
    delete:
      summary: Delete the selected form processing template.
      description: Delete the selected form processing template.
      parameters:
      - $ref: '#/components/parameters/clientID'
      - $ref: '#/components/parameters/templateName'
      responses:
        '200':
          description: Successfully delete the form processing template
          
  /GetListBarcodeTemplates:
    get:
      summary: Returns the list of barcode recognition templates.
      description: Retrieve the list of barcode recognition templates.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns the list of barcode recognition templates.
          content:
            application/json:
              schema: 
                type: array
                items:
                  type: string
                  description: Template name.
                example: [ "BarcodeOnPage", "BarcodeOnSeparate" ]
                
  /GetBarcodeTemplate:
    get:
      summary: Returns the information of selected barcode recognition template.
      description: Retrieve the information of selected barcode recognition template.<br> Which included the name of the template and location of the barcode
      parameters:
        - $ref: '#/components/parameters/clientID'
        - $ref: '#/components/parameters/templateName'
      responses:
        '200':
          description: Returns the information of selected form processing.<br> Which included the name of the template and location of the barcode
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BarcodeTemplateResponse'
                
  /SaveBarcodeTemplate:
    post:
      summary: Save the designed barcode recognition template.
      description: Save the barcode recognition template that contain the location of the barcode.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveBarcodeTemplateRequest"
      responses:
        '200':
          description: Successfully save the barcode recognition template
          
  /DeleteBarcodeTemplate:
    delete:
      summary: Delete the selected barcode recognition template.
      description: Delete the selected barcode recognition template.
      parameters:
      - $ref: '#/components/parameters/clientID'
      - $ref: '#/components/parameters/templateName'
      responses:
        '200':
          description: Successfully delete the barcode recognition template
  
  /CheckBarcodePages:
    get:
      summary: Start the job to check and extract pages that contains barcode(s).
      description: Start the job to check and extract pages that contains barcode(s). <br/> You need to poll 'GetBarcodeCheckingProgress' API to get the job status.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Checking for pages that contain barcodes process is successfully started
          
  /GetBarcodeCheckingProgress:
    get:
      summary: Get barcode pages checking progress with contains pages that have barcode(s).
      description: Poll this method if the CheckBarcodePages request has been invoked. <br/>Return whether the Checking for pages that contain barcodes process has completed and the current progress.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Return 'BarcodeCheckingProgress' object for process status
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BarcodeCheckingProgress'
  
  /RecognizeBarcode:
    post:
      summary: Start barcode(s) recognizing job.
      description: Start barcode(s) recognizing job with the supplied parameters. <br/> You need to poll 'GetBarcodeRecognizingProgress' API to get the job status.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecognizeBarcodeRequest"
      responses:
        '200':
          description: Barcode recognition process is successfully started
  
  /GetBarcodeRecognizingProgress:
    get:
      summary: Get barcode(s) recognizing progress.
      description: Poll this method if the RecognizeBarcode request has been invoked. <br/>Return whether the barcode recognition process has completed and the current progress.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Return 'BarcodeRecognizingProgress' object for process status
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BarcodeRecognizingProgress'
                
  /ApplyBarcodeSelection:
    post:
      summary: Apply user selected barccode for page(s) that contains multiple barcodes.
      description: Apply user selected barccode for page(s) that contains multiple barcodes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplyBarcodeSelectionRequest"
      responses:
        '200':
          description: Selected barcode is applied successfully
          
  /ApplyUserProvidedBarcodes:
    post:
      summary: Apply user provided barccode for page(s) that didn't contains barcode or barcode(s) cannot be recognized.
      description: Apply user provided barccode for page(s) that didn't contains barcode or barcode(s) cannot be recognized.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProvidedBarcodeRequest"
      responses:
        '200':
          description: Barcode data of page with user provided barcode.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/BarcodeData'
                
components:
  parameters:
    clientID:
      name: clientID
      in: query
      description: unique identifier for the session
      required: true
      schema:
        type: integer
      example: 1619662600769
    
    licenseFile:
      name: licenseFile
      in: query
      description: license file url
      required: false
      schema:
        type: string
      example: "http://localhost:5000/Home/K1Licence"

    fileUploadHeaders:
      name: fileUploadHeaders
      in: query
      description: Additional headers for request to upload scanned page(s)
      required: false
      schema:
        type: array
        items: 
          $ref: "#/components/schemas/KeyValuePairs"
      example: [{ key: "", value: ""}]

    id:
      name: id
      in: query
      description: unique identifier for the imaging device
      required: true
      schema:
        type: integer
      example: 0

    page:
      name: page     
      in: query
      description: index of page to work with
      required: true
      schema:
        type: integer
      example: 0
      
    currentPage:
      name: currentPage     
      in: query
      description: current page that we are working on
      required: true
      schema:
        type: integer
      example: 0
    
    autoDeskew:
      name: autoDeskew     
      in: query
      description: whether to automatically de-skew the scanned page(s) or not.
      required: true
      schema:
        type: boolean
      example: false
      
    isPDFA:
      name: isPDFA
      in: query
      description: file type of output pdf
      required: true
      schema:
        type: boolean
      example: true
      
    scanType:
      name: scanType     
      in: query
      required: true
      description: whether to automatically de-skew the scanned page(s) or not.
      schema:
        $ref: '#/components/schemas/EnumScanType'
        
    templateName:
      name: templateName
      in: query
      description: name of the template to be used for processing
      required: true
      schema:
        type: string
      example: MonthlyInvoice
      
    templateId:
      in: query
      name: templateId
      required: true
      description: id of the template to be used for processing
      schema:
        type: string
      example: MonthlyInvoice
      
    pageNumber:
      name: pageNumber     
      in: query
      description: index of page to work with
      required: true
      schema:
        type: integer
      example: 1
      
    pageIndex:
      name: pageIndex     
      in: query
      description: index of page to work with
      required: true
      schema:
        type: integer
      example: 1
      
    isEditting:
      name: isEditting
      in: query
      description: whether editting an exsiting template or adding a new one
      required: true
      schema:
        type: boolean
      example: false
      
  schemas:
    EnumOCRType:
      description: '0: NONE - document will be generated without OCR<br/>1: MAPPED - document will be generated with text mapped to the word<br/> 2: EMBEDDED - document will be generated with embedded text'
      type: integer
      enum:
        - 0
        - 1
        - 2
    EnumScanType:
      description: '1: AFTER_PAGE - places the scanned page/s after the current page<br/>2: BEFORE_PAGE - places the scanned page/s before the current page<br/> 3: REPLACE_PAGE - replaces the current page with the scanned page/s'
      type: integer
      enum:
        - 1
        - 2
        - 3
    InterfaceType:
      description: '0: Hidden - No interfaces are shown<br/>1: Visible - Both interfaces are shown<br/>2: WebOnly - Only the web interface is shown<br/>3:TwainOnly - Only the desktop interface is shown'
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
    
    BarcodeLocation:
      description: '0: BarcodeOnCoverSheet - Barcode can be found on cover sheet<br/>1: BarcodeOnDocument - Barcode can be found on document'
      type: integer
      enum:
        - 0
        - 1

    FileTypes:
      type: string
      enum:
        - gif
        - jpg
        - png
        - bmp
        - tif
        - pdf

    SaveToType:
      description: '0: Upload - Upload to fileUploadURL endpoint<br/>1: Local - Save locally'
      type: integer
      enum:
        - 0
        - 1

    ResizeType:
      description: '0: Percentage - Resize width & height page(s) by percentage<br/>1: Pixels -  Resize width & height page(s) by pixel(s)'
      type: integer
      enum:
        - 0
        - 1

    EnumModifyPageType:
      description: '0: ThisPage - Modify only this page<br/>1: AllPages - Modify all pages'
      type: integer
      enum:
        - 0
        - 1

    FileData:
      type: object
      properties:
        filename:
          type: string
          description: output filename
          example: hello_world.pdf
        fileLength:
          type: integer
          description: file size in bytes
          example: 12800
        sizeDisplay:
          type: string
          example: 12.5 MB
          description: converted file size
        extension:
          type: string
          description: file type extension
          example: .pdf
        hasOcrRequest:
          type: boolean
          description: whether the document was requested to be OCR'ed
          example: true
        uploadResponse:
          type: string
          description: response returned from the file upload route 
          example: null
        saveToType:
          type: integer
          description: whether the document will be saved locally or uploaded to 'fileUploadURL' endpoint
          $ref: '#/components/schemas/SaveToType'
          
    StatusMessage:
      type: object
      properties:
        scanRunning:
          type: boolean
          description: whether the imaging device is in a sessions and capturing
          example: true
        success:
          type: boolean
          description: whether an error has been encountered by the imaging device.
          example: true
        message:
          type: string
          description: the error message if the scanner encountered an error.
          example: document feeder is empty
        pageCount:
          type: integer
          description: total pages scanned
          example: 5
          
    ImageData:
      type: object
      properties:
        clientID:
          type: integer
          description: unique identifier for the session
          example: 1619662600769
        page:
          description: the current page index
          type: integer
          example: 3
        image:
          type: string
          description: base64 encoded string
          
    ImageDataResponse:
      type: object
      properties:
        clientID:
          type: integer
          description: unique identifier for the session
          example: 1619662600769
        page:
          description: the current page index
          type: integer
          example: 3
        image:
          type: string
          description: base64 encoded string
        horizontalDPI:
          description: the page's horizontal DPI/Resolution
          type: number
          example: 600
        verticalDPI:
          description: the page's vertical DPI/Resolution
          type: number
          example: 600
          
    Source:
      type: object
      properties:
        id:
          type: integer
          description: unique identifier of the imaging device
          example: 12
        name:
          type: string
          description: name of the imaging device
          example: CanonScan Lide 110
        isDefault:
          type: boolean
          description: whether the imaging device has been set as default on the user's machine
          example: true
        documentSourceIds:
          type: object
          properties:
            documentSourceId:
              type: integer
              example: 0
            functionalUnit:
              type: object
          description: detailed information of the imaging device's properties
          
    PageProcessingProgress:
      type: object
      properties:
        page:
          type: integer
          description: current page being processed
          example: 3
        totalPages:
          type: integer
          description: total pages in the document to be processed
          example: 5
        completed:
          type: boolean
          description: whether the page process has been completed
          example: true
        errorMessage:
          type: string
          description: error message when processing page
          example: ""
        result:
          type: string
          description: result message when processing page
          example: ""
          
    AddingDocumentProgress:
      type: object
      properties:
        page:
          type: integer
          description: current page being processed
          example: 2
        totalPages:
          type: integer
          description: total pages in the document to be processed
          example: 5
        completed:
          type: boolean
          description: whether the page process has been completed
          example: true
        errorMessage:
          type: string
          description: error message when processing page
          example: ""
        result:
          type: string
          description: result message when processing page
          example: ""
        totalAddingPages:
          type: integer
          description: total adding/importing page(s)
          example: 3
          
    OcrProcessingProgress:
      type: object
      properties:
        page:
          type: integer
          description: current page being processed
          example: 3
        totalPages:
          type: integer
          description: total pages in the document to be processed
          example: 5
        completed:
          type: boolean
          description: whether the OCR process has been completed
          example: true
        errorMessage:
          type: string
          description: error message when processing OCR
          example: ""
        canceled:
          type: boolean
          description: whether the OCR process has been canceled
          example: false
          
    ServiceData:
      type: object
      properties:
        sourceList:
          description: a collection containing the imaging devices available on the user's machine
          type: array
          items: 
            $ref: "#/components/schemas/Source"
        useOcr:
          description: whether OCR is enabled on the user interface
          type: boolean
          example: true
        version:
          description: the version of the service installed on the user's machine.
          type: string
          example: 1.0.0
          
    FetchVersion:
      type: object
      properties:
        version:
          description: The version of the installed service.
          type: string
          example: 1.0.0
          
    StartScan:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        twainID:
          type: integer
          description: the selectd image acquisition device.
          example: 1
        currentPage:
          type: integer
          description: the current page in the doucment.
          example: 1
        pixelTypeID:
          type: integer
          description: id to select the pixel type.
          example: 1
        resolutionID:
          type: integer
          description: id to select the resoltion.
          example: 1
        pageSizeID:
          type: integer
          description: id to selct the page size.
          example: 1
        duplexID:
          type: integer
          description: id to select the duplex option.
          example: 1
        documentSourceID:
          type: integer
          description: id to select the document source.
          example: 1
        interfaceType:
          type: integer
          $ref: "#/components/schemas/InterfaceType"
          example: 1
        scanType:
          type: integer
          $ref: "#/components/schemas/EnumScanType"
          example: 1
        autoDeskew:
          type: boolean
          description: whether to automatically de-skew the scanned page(s) or not.
          example: false
          
    PageSizeValidation:
      type: object
      properties:
        warningPages:
          type: array
          items: 
            example: [1, 2]
          description: List of warning pages that exceeded the page size limitation
        pageSizeLimitDisplay:
          type: string
          description: Display string of page size limitation
          example: "20MB"
          
    FileSizeValidation:
      type: object
      properties:
        isValid:
          type: boolean
          description: Indicate whether the to-be-created file exceed the limit or not
        fileSizeLimitDisplay:
          type: string
          description: Display string of file size limitation
          example: "100MB"
        fileSizeDisplay:
          type: string
          description: Display string of to-be-created file size
          example: "116MB"
        error:
          type: string
          description: Error message when validating pdf file size
          example: "Error"
        completed:
          type: boolean
          description: Indicate wether the validation job completed or not
          example: true
          
    AttachDocument:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        filename:
          type: string
          description: the filename of the generated document
          example: hello_world
        filetype:
          type: string
          $ref: '#/components/schemas/FileTypes'
          description: the output filetype.
          example: PDF
        ocrType:
          type: integer
          description: whether the document will be OCR'ed. (only available for pdf)
          $ref: '#/components/schemas/EnumOCRType'
        serverID:
          type: integer
          description: unique identifer for the server.
          example: 1ae23-dd44d-ddsa33
        fileUploadURL:
          type: string
          description: route where the file will be posted to by the service
          example: "http://localhost:5000/Home/UploadFile"
        fileUploadHeaders:
          type: array
          items: 
            $ref: "#/components/schemas/KeyValuePairs"
            example: [{ key: "", value: ""}]
        saveToType:
          type: integer
          description: whether the document will be saved locally or uploaded to ''fileUploadURL' endpoint
          $ref: '#/components/schemas/SaveToType'
        isBarcodeProcessing:
          type: boolean
          description: whether to recognize barcodes on the document and name them output page(s) by recognized barcode result
          example: false
        templateId:
          $ref: '#/components/parameters/templateId'

    ResizePageRequest:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        page:
          $ref: '#/components/parameters/page'
        horizontal:
          type: integer
          description: width to resize (value will either be percent or pixel(s))
          example: 100
        vertical:
          type: integer
          description: height to resize (value will either be percent or pixel(s))
          example: 100
        resizeType:
          type: integer
          description: whether resize width and height of page(s) by percentage or pixel(s)
          $ref: '#/components/schemas/ResizeType'
        applyForAll:
          type: boolean
          description: where resize request will apply for all pages or only selected page
          example: false
          
    DeskewPageRequest:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        page:
          $ref: '#/components/parameters/page'
        deskewPageType:
          type: integer
          description: whether to de-skew all page(s) or only selected page
          $ref: '#/components/schemas/EnumModifyPageType'

    ResetPage:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        page:
          $ref: '#/components/parameters/page'
        resetType:
          type: integer
          description: whether reset all resized page(s) or only selected page
          $ref: '#/components/schemas/EnumModifyPageType'
    
    RestorePage:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        page:
          $ref: '#/components/parameters/page'
          
    InitilizeRequest:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        licenseFile:
          $ref: '#/components/parameters/licenseFile'
    
    FormProcessingTemplateResponse:
      type: object
      properties:
        templateName:
          $ref: '#/components/parameters/templateName'
        regionsPages:
          $ref: '#/components/schemas/RegionsPages'
    
    BarcodeTemplateResponse:
      type: object
      properties:
        templateName:
          $ref: '#/components/parameters/templateName'
        location:
          $ref: '#/components/schemas/Location'
          
    BaseRegionTemplateRequest:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        templateName:
          $ref: '#/components/parameters/templateName'
          
    RegionTemplateRequest:
      type: object
      allOf:
      - $ref: '#/components/schemas/BaseRegionTemplateRequest'
      - type: object
        properties:
          isEditting:
            $ref: '#/components/parameters/isEditting'
    
    SaveBarcodeTemplateRequest:
      type: object
      allOf:
      - $ref: '#/components/schemas/RegionTemplateRequest'
      - type: object
        properties:
          barcodeLocation:
            $ref: '#/components/schemas/Location'
            
    SaveFormProcessingTemplateRequest:
      type: object
      allOf:
      - $ref: '#/components/schemas/RegionTemplateRequest'
      - type: object
        properties:
          regionsPages:
            $ref: '#/components/schemas/RegionsPages'
            
    BarcodeCheckingProgress:
      type: object
      properties:
        completed:
          type: boolean
          description: whether the OCR process has been completed
          example: true
        errorMessage:
          type: string
          description: error message when processing OCR
          example: ""
        barcodePages:
          type: array
          items:
            type: integer
          description: pages that contain barcode(s).
          example: [1,2,3]
          
    RecognizeBarcodeRequest:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        templateId:
          $ref: '#/components/parameters/templateId'
        barcodeLocation:
          $ref: '#/components/schemas/BarcodeLocation'
    
    BarcodeRecognizingProgress:
      type: object
      properties:
        completed:
          type: boolean
          description: whether the OCR process has been completed
          example: true
        errorMessage:
          type: string
          description: error message when processing OCR
          example: ""
        barcodeDatas:
          type: array
          items:
            $ref: '#/components/schemas/BarcodeData'
        emptyBarcodePages:
          type: array
          items:
            type: integer
          description: pages that didn't contain any barcode.
          example: [4,5,6]
          
    ApplyBarcodeSelectionRequest:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        barcodeSelections:
          type: array
          items:
            $ref: '#/components/schemas/BarcodeSelection'
    
    UserProvidedBarcodeRequest:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        isFirstPageEmpty:
          type: boolean
          description: indicate that this provided barcode is for the first page without barcode
          example: false
          default: false
        providedBarcodes:
          type: array
          items:
            $ref: '#/components/schemas/ProvidedBarcode'
            
    BarcodeSelection:
      type: object
      properties:
        pageIndex:
          $ref: '#/components/parameters/pageIndex'
        selectedBarcode:
          type: string
          description: selected barcode from multiple barcodes on a page
          example: "IN123456789"
          
    ProvidedBarcode:
      type: object
      properties:
        pageIndex:
          $ref: '#/components/parameters/pageIndex'
        barcode:
          type: string
          description: user provided barcode for the page
          example: "IN123456789"
          
    RegionsPages:
      type: array
      items:
        $ref: '#/components/schemas/RegionsPage'
    
    BarcodeData:
      type: object
      properties:
        startPage:
          type: integer
          description: start page that contains barcode(s)
          example: 1
        endPage:
          type: integer
          description: end page that contains barcode(s)
          example: 1
        selectedBarcode:
          type: string
          description: selected barcode from recoginized barcode(s)
          example: IN123456789
        barcodes:
          type: array
          description: list of recoginized barcode(s) on a page
          items:
            type: string
          example: [IN123456789]
        barcodeLocations:
          type: array
          description: list of recoginized barcode(s) and location of them on a page
          items:
            $ref: '#/components/schemas/BarcodeProcessingModel'
    
    BarcodeProcessingModel:
      type: object
      properties:
        barcode:
          type: string
          description: recognized barcode
          example: IN123456789
        location:
          type: array
          description: location recognized barcode
          items:
            $ref: '#/components/schemas/Location'
          
    RegionsPage:
      type: object
      properties:
        pageNumber:
          $ref: '#/components/parameters/pageNumber'
        regions:
          $ref: '#/components/schemas/Region'
    
    Region:
      type: object
      allOf:
      - $ref: '#/components/schemas/Location'
      - type: object
        properties:
          name:
            type: string
            description: Name of the region, typically the name of the field to extract data from
            example: InvoiceNumber
          text:
            type: string
            description: Extracted data from the region
            example: ""
    
    Location:
      type: object
      properties:
        height:
          type: number
          description: height of the region
          example: 300
        width:
          type: number
          description: width of the region
          example: 400
        locationX:
          type: number
          description: x-coordinate of the region
          example: 839.88
        locationY:
          type: number
          description: y-coordinate of the region
          example: 1839.88

    KeyValuePairs:
      type: object
      properties:
        key:
          type: string
          description: Header name
          example: "X-Access-Code"
        value:
          type: string
          description: Header value
          example: "Test"
