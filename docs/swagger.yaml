openapi: 3.0.0
info:
  title: KnowledgeOne WebTwain SDK
  description: The WebTwainSDK allows for interfacing with imaging devices connected to the client machine.
  version: 2.0.0
  contact:
    name: KnowledgeOne Support  
    url: https://webtwainsdk.com/contact-us/
    email: support@knowledgeonecorp.com
paths:
  /Initialize:
    post:
      summary: Initialises the service.
      description: Starts a new session with the service. <br/> You will need to generate a unique identifer for the session, this will be used for subsequent calls. (e.g. the current time in ticks). <br/> This call will return the version of the installed service and whether the OCR option is enabled.
      parameters: 
        - $ref: '#/components/parameters/clientID'
        - $ref: '#/components/parameters/licenseFile'
      responses:
        '200':
          description: Returns a ServiceData object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceData'
                
  /InitService:
    post:
      summary: Initialises the service.
      description: Starts a new session with the service. <br/> You will need to generate a unique identifer for the session, this will be used for subsequent calls. (e.g. the current time in ticks). <br/> This call will return the a collection of imaging devices, the version of the installed service and whether the OCR option is enabled.
      parameters: 
        - $ref: '#/components/parameters/clientID'
        - $ref: '#/components/parameters/licenseFile'
      responses:
        '200':
          description: Returns a ServiceData object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceData'

  /ServiceAvailable:
    get:
      summary: Returns HTTP200 OK if the service is available.
      description: Returns HTTP200 OK if the service is available.
      responses:
        '200':
          description: The service is available.

  /FetchVersion:
    get:
      summary: Returns the version of the service.
      responses:
        '200':
          description: Returns a string value of the current version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchVersion'
                
  /StartScan:
    post:
      summary: Starts a session with the selected imaging device.
      description: Starts a session with the selected imaging device. <br/> The native scanning form for the selected device will be shown to the user. <br/> Once this method has been invoked you will need to poll CheckScanStatus to determine if the session has ended.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StartScan"
      responses:
        '200':
          description: Returns current number of pages scanned.
          content:
            application/json:
              schema:
                type: integer
                example: 3
                description: the current number of pages scanned.
  
  /CheckScanStatus:
    get:
      summary: Checks if the current image acquisition session has completed.
      description: Poll this method once a session has been instantiated with the scanner. <br/> The scanRunning property is set to false on completion. <br/> Return whether the native scanner is still running, if an error has been encountered and the total pages scanned.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns a StatusMessage object.
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/StatusMessage'
                
  /GetPageCount:
    get:
      summary: Returns the total number of pages currently acquired.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns an integer value total number of pages acquired
          content:
            application/json:
              schema: 
                type: integer
                description: a positive number
                example: 8
  
  /GetPage:
    get:
      summary: Returns the image details at a specified index.
      description: After successful image aquisition (CheckScanStatus), use this method to retrieve the page to be show the user. <br/> Returns The image is a base64 encoded string and the requested page.
      parameters:
        - $ref: '#/components/parameters/clientID'
        - in: query
          name: page
          description: the page index
          example: 3
          schema: 
            type: integer
          required: true
      responses:
        '200':
          description: Returns an ImageData object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ImageData'

  /SavePage:
    get:
      summary: Saves any modifications made to the page.
      description: Should be called if any changes have been applied to the source image (redacting|removed|rotating).
      parameters:
        - in: query
          name: data
          schema: 
            $ref: '#/components/schemas/ImageData'
          required: true
      responses:
        '200':
          description: Returns whether the save was successful or not
          content:
            application/json:
              schema: 
                type: boolean
                description: whether the save was successful
                example: true
                
  /MovePage:
    post:
      summary: Moves the page from a specified index to another index.
      parameters:
        - $ref: '#/components/parameters/clientID'
        - in: query
          name: fromPage
          description: the index of the page to be moved.
          example: 1
          schema: 
            type: integer
          required: true
        - in: query
          name: toPage
          description: the index to be placed at in the document.
          example: 5
          schema: 
            type: integer
          required: true
      responses:
        '200':
          description: Returns whether the page was moved or not
          content:
            application/json:
              schema: 
                type: boolean
                description: whether the move was successful
                example: true
                
  /DeletePage:
    post:
      summary: Deletes a page at the specified index.
      description: This operation can not be reversed.
      parameters:
        - $ref: '#/components/parameters/clientID'
        - in: query
          name: page
          description: the page index to delete
          example: 3
          schema: 
            type: integer
          required: true
      responses:
        '200':
          description: Returns whether the page was deleted or not.
          content:
            application/json:
              schema: 
                type: boolean
                description: whether the deletion was successful.
                example: true

  /ResizePage:
    post:
      summary: Start resizing page(s) process.
      description: Start resizing page(s) with the supplied parameters. <br/> You need to poll GetResizingProgress API to get the job status.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResizePageRequest"
      responses:
        '200':
          description: Resizing process is successfully started
          
  /GetResizingProgress:
    get:
      summary: Checks if the Resizing process has completed on the clients machine.
      description: Poll this method if the ResizePage request has been invoked. <br/>Return whether the Resizing process has completed and the current progress.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Return PageProcessingProgress object for process status
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/PageProcessingProgress'
                
  /DeleteAllPages:
    post:
      summary: Deletes all the acquired pages from the imaging device.
      description: This operation can not be reversed.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns whether the pages were deleted or not
          content:
            application/json:
              schema: 
                type: boolean
                description: whether the deletion was successful.
                example: true
                
  /RestorePage:
    post:
      summary: Restore the modified page to original state.
      description: Restore modified page with the supplied parameters. <br/> Returns the current page.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestorePage"
      responses:
        '200':
          description: Returns a ImageData object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ImageData'
            
  /RestoreAllPages:
    post:
      summary: Restore all modified pages to original state.
      description: Restore all modified pages with the supplied parameters. <br/> Returns the current page.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestorePage"
      responses:
        '200':
          description: Returns a ImageData object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ImageData'
                
  /ValidatePageSize:
    get:
      summary: Validate the page size before ORCing.
      description: Validate the page size before ORCing and return the list of warning pages.<br/> Warning limit can be set through <strong>OCRFilesizeWarningInMB</strong> setting in <strong>K1ScanService.exe.config</strong>. A value of <strong>0(zero)</strong> means no warning at all. No setting means take default of <strong>20MB</strong>
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns a PageSizeValidation object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/PageSizeValidation'
                
  /ValidatePdfSize:
    get:
      summary: Validate the pdf size before ORCing.
      description: Validate the pdf size before ORCing to indicate whether the pdf page is exceed the upload limit or not.<br/> Warning limit can be set through <strong>FileUploadLimitInMB</strong> setting in <strong>K1ScanService.exe.config</strong>. A value of <strong>0(zero)</strong> means no warning at all. No setting means take default of <strong>100MB</strong>
      parameters:
        - $ref: '#/components/parameters/clientID'
        - $ref: '#/components/parameters/isPDFA'
      responses:
        '200':
          description: Returns a FileSizeValidation object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/FileSizeValidation'
                
  /AttachDocument:
    post:
      summary: Returns the file details of the generated file.
      description: Generates a file with the supplied parameters. <br/> Returns the file details, including the filename, size and type. Also returns the response from the file upload route. <br/>If the ocrType is set to a non-zero value, you will need to poll the CheckOCRStatus request.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttachDocument"
      responses:
        '200':
          description: Returns a FileData object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/FileData'
                
  /GetOcrProgress:
    get:
      summary: Checks if the OCR process has completed on the clients machine.
      description: Poll this method if the AttachDocumentRequest has been invoked with a non-zeo value for the <b>ocrType</b>. <br/>Return whether the OCR process has completed and the current progress.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns a OcrProcessingProgress object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/OcrProcessingProgress'
                
  /CancelOcrProcessing:
    get:
      summary: Cancel the OCR processing that still in progress.
      description: Enable the ability to cancel the OCR processing, especially the intensive and long running one.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns whether the process is successfully canceled or not
          content:
            application/json:
              schema: 
                type: boolean
                description: whether the cancelation was successful.
                example: true

  /GetOcrDocument:
    get:
      summary: Returns the file details of the generated file.
      description: Retrieves the generated OCR'ed document. <br /> Invoke this method when the <b>completed</b> property of the GetOcrProgress is set to true <br/> Returns the file details, including the filename, size and type. Also returns the response from the file upload route.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns a StatusMessage object
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/FileData'
  
  /GetDocument:
    get:
      summary: Retrieves the created document from the scan service.
      description: Retrieves the latest created document from the scan service.
      responses:
        '200':
          description: Returns the document file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  
  /Devices:
    get:
      summary: Returns the collection of imaging devices.
      description: Retrieves the collection containing the imaging devices available on the user's machine.
      parameters:
        - $ref: '#/components/parameters/clientID'
      responses:
        '200':
          description: Returns a a collection containing the imaging devices available on the user's machine
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: "#/components/schemas/Source"
  /Device:
    get:
      summary: Return properties of the specified imaging device.
      description: Retrieves the properties of the specified imaging device. <br> Properties are Source Type, Pixel Type, Resolution Type, Duplex (Feeder), Page Size,...
      parameters:
        - $ref: '#/components/parameters/clientID'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Return properties of the specified imaging device.
          content:
            application/json:
              schema: 
                type: object
                $ref: "#/components/schemas/Source"
  /CheckIsFeederLoaded:
    get:
      summary: Checks if document feeder is loaded or empty for the specified imaging device.
      description: Checks if document feeder is loaded with paper or empty for the specified imaging device.
      parameters:
        - $ref: '#/components/parameters/clientID'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Return boolean result.
          content:
            application/json:
              schema: 
                type: boolean
  /ResetService:
    get:
      summary: Restart the service to reset the list of imaging devices.
      description: Restart the service to reset the list of imaging devices. <br> Returns HTTP200 OK if the service is successfully restarted.
      responses:
        '200':
          description: The service is successfully restarted.

components:
  parameters:
    clientID:
      name: clientID
      in: query
      description: unique identifier for the session
      required: true
      schema:
        type: integer
      example: 1619662600769
    
    licenseFile:
      name: licenseFile
      in: query
      description: license file url
      required: false
      schema:
        type: string
      example: "http://localhost:5000/Home/K1Licence"

    fileUploadHeaders:
      name: fileUploadHeaders
      in: query
      description: Additional headers for request to upload scanned page(s)
      required: false
      schema:
        type: array
        items: 
          $ref: "#/components/schemas/KeyValuePairs"
      example: [{ key: "", value: ""}]

    id:
      name: id
      in: query
      description: unique identifier for the imaging device
      required: true
      schema:
        type: integer
      example: 0

    page:
      name: page     
      in: query
      description: index of page to work with
      required: true
      schema:
        type: integer
      example: 0
      
    isPDFA:
      name: isPDFA
      in: query
      description: file type of output pdf
      required: true
      schema:
        type: boolean
      example: true
      
  schemas:
    EnumOCRType:
      description: '0: NONE - document will be generated without OCR<br/>1: MAPPED - document will be generated with text mapped to the word<br/> 2: EMBEDDED - document will be generated with embedded text'
      type: integer
      enum:
        - 0
        - 1
        - 2
    EnumScanType:
      description: '1: AFTER_PAGE - places the scanned page/s after the current page<br/>2: BEFORE_PAGE - places the scanned page/s before the current page<br/> 3: REPLACE_PAGE - replaces the current page with the scanned page/s'
      type: integer
      enum:
        - 1
        - 2
        - 3
    InterfaceType:
      description: '0: Hidden - No interfaces are shown<br/>1: Visible - Both interfaces are shown<br/>2: WebOnly - Only the web interface is shown<br/>3:TwainOnly - Only the desktop interface is shown'
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3

    FileTypes:
      type: string
      enum:
        - gif
        - jpg
        - png
        - bmp
        - tif
        - pdf

    SaveToType:
      description: '0: Upload - Upload to fileUploadURL endpoint<br/>1: Local - Save locally'
      type: integer
      enum:
        - 0
        - 1

    ResizeType:
      description: '0: Percentage - Resize width & height page(s) by percentage<br/>1: Pixels -  Resize width & height page(s) by pixel(s)'
      type: integer
      enum:
        - 0
        - 1

    ResetPageType:
      description: '0: ThisPage - Reset only this resized page<br/>1: AllPages - Reset all resized pages'
      type: integer
      enum:
        - 0
        - 1

    FileData:
      type: object
      properties:
        filename:
          type: string
          description: output filename
          example: hello_world.pdf
        fileLength:
          type: integer
          description: file size in bytes
          example: 12800
        sizeDisplay:
          type: string
          example: 12.5 MB
          description: converted file size
        extension:
          type: string
          description: file type extension
          example: .pdf
        hasOcrRequest:
          type: boolean
          description: whether the document was requested to be OCR'ed
          example: true
        uploadResponse:
          type: string
          description: response returned from the file upload route 
          example: null
        saveToType:
          type: integer
          description: whether the document will be saved locally or uploaded to 'fileUploadURL' endpoint
          $ref: '#/components/schemas/SaveToType'
    StatusMessage:
      type: object
      properties:
        scanRunning:
          type: boolean
          description: whether the imaging device is in a sessions and capturing
          example: true
        success:
          type: boolean
          description: whether an error has been encountered by the imaging device.
          example: true
        message:
          type: string
          description: the error message if the scanner encountered an error.
          example: document feeder is empty
        pageCount:
          type: integer
          description: total pages scanned
          example: 5
    ImageData:
      type: object
      properties:
        clientID:
          type: integer
          description: unique identifier for the session
          example: 1619662600769
        page:
          description: the current page index
          type: integer
          example: 3
        image:
          type: string
          description: base64 encoded string
    Source:
      type: object
      properties:
        id:
          type: integer
          description: unique identifier of the imaging device
          example: 12
        name:
          type: string
          description: name of the imaging device
          example: CanonScan Lide 110
        isDefault:
          type: boolean
          description: whether the imaging device has been set as default on the user's machine
          example: true
        documentSourceIds:
          type: object
          properties:
            documentSourceId:
              type: integer
              example: 0
            functionalUnit:
              type: object
          description: detailed information of the imaging device's properties
    PageProcessingProgress:
      type: object
      properties:
        page:
          type: integer
          description: current page being processed
          example: 3
        totalPages:
          type: integer
          description: total pages in the document to be processed
          example: 5
        completed:
          type: boolean
          description: whether the page process has been completed
          example: true
        errorMessage:
          type: string
          description: error message when processing page
          example: ""
    OcrProcessingProgress:
      type: object
      properties:
        page:
          type: integer
          description: current page being processed
          example: 3
        totalPages:
          type: integer
          description: total pages in the document to be processed
          example: 5
        completed:
          type: boolean
          description: whether the OCR process has been completed
          example: true
        errorMessage:
          type: string
          description: error message when processing OCR
          example: ""
        canceled:
          type: boolean
          description: whether the OCR process has been canceled
          example: false
    ServiceData:
      type: object
      properties:
        sourceList:
          description: a collection containing the imaging devices available on the user's machine
          type: array
          items: 
            $ref: "#/components/schemas/Source"
        useOcr:
          description: whether OCR is enabled on the user interface
          type: boolean
          example: true
        version:
          description: the version of the service installed on the user's machine.
          type: string
          example: 1.0.0
    FetchVersion:
      type: object
      properties:
        version:
          description: The version of the installed service.
          type: string
          example: 1.0.0
    StartScan:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        twainID:
          type: integer
          description: the selectd image acquisition device.
          example: 1
        currentPage:
          type: integer
          description: the current page in the doucment.
          example: 1
        pixelTypeID:
          type: integer
          description: id to select the pixel type.
          example: 1
        resolutionID:
          type: integer
          description: id to select the resoltion.
          example: 1
        pageSizeID:
          type: integer
          description: id to selct the page size.
          example: 1
        duplexID:
          type: integer
          description: id to select the duplex option.
          example: 1
        documentSourceID:
          type: integer
          description: id to select the document source.
          example: 1
        interfaceType:
          type: integer
          $ref: "#/components/schemas/InterfaceType"
          example: 1
        scanType:
          type: integer
          $ref: "#/components/schemas/EnumScanType"
          example: 1
          
    PageSizeValidation:
      type: object
      properties:
        warningPages:
          type: array
          items: 
            example: [1, 2]
          description: List of warning pages that exceeded the page size limitation
        pageSizeLimitDisplay:
          type: string
          description: Display string of page size limitation
          example: "20MB"
          
    FileSizeValidation:
      type: object
      properties:
        isValid:
          type: boolean
          description: Indicate whether the to-be-created file exceed the limit or not
        fileSizeLimitDisplay:
          type: string
          description: Display string of file size limitation
          example: "100MB"
        fileSizeDisplay:
          type: string
          description: Display string of to-be-created file size
          example: "116MB"
          
    AttachDocument:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        filename:
          type: string
          description: the filename of the generated document
          example: hello_world
        filetype:
          type: string
          $ref: '#/components/schemas/FileTypes'
          description: the output filetype.
          example: PDF
        ocrType:
          type: integer
          description: whether the document will be OCR'ed. (only available for pdf)
          $ref: '#/components/schemas/EnumOCRType'
        serverID:
          type: integer
          description: unique identifer for the server.
          example: 1ae23-dd44d-ddsa33
        fileUploadURL:
          type: string
          description: route where the file will be posted to by the service
          example: "http://localhost:5000/Home/UploadFile"
        fileUploadHeaders:
          type: array
          items: 
            $ref: "#/components/schemas/KeyValuePairs"
            example: [{ key: "", value: ""}]
        saveToType:
          type: integer
          description: whether the document will be saved locally or uploaded to ''fileUploadURL' endpoint
          $ref: '#/components/schemas/SaveToType'

    ResizePageRequest:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        page:
          $ref: '#/components/parameters/page'
        horizontal:
          type: integer
          description: width to resize (value will either be percent or pixel(s))
          example: 100
        vertical:
          type: integer
          description: height to resize (value will either be percent or pixel(s))
          example: 100
        resizeType:
          type: integer
          description: whether resize width and height of page(s) by percentage or pixel(s)
          $ref: '#/components/schemas/ResizeType'
        applyForAll:
          type: boolean
          description: where resize request will apply for all pages or only selected page
          example: false

    ResetPage:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        page:
          $ref: '#/components/parameters/page'
        resetType:
          type: integer
          description: whether reset all resized page(s) or only selected page
          $ref: '#/components/schemas/ResetPageType'
    
    RestorePage:
      type: object
      properties:
        clientID:
          $ref: '#/components/parameters/clientID'
        page:
          $ref: '#/components/parameters/page'

    KeyValuePairs:
      type: object
      properties:
        key:
          type: string
          description: Header name
          example: "X-Access-Code"
        value:
          type: string
          description: Header value
          example: "Test"
